{
  "name" : "Seeing the Matrix",
  "cells" : [ {
    "id" : 0,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "binary",
      "extraFields" : { }
    }
  }, {
    "id" : 1,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Binary Classification",
      "extraFields" : { }
    }
  }, {
    "id" : 2,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import uk.ac.ucl.cs.mr.acltutorial._\nimport MatrixRenderer._\n\nval layout = Layout(colHeaderSize=60, ch=45, cw=200, rowHeaderSize=0, numCols=2,numRows=7)\n\nval m1 = Matrix(Seq(Cell(0,0,\"label\"),Cell(0,1,\"features\"),Cell(1,0,1),Cell(1,1,\"f1,f3,f4,f6\"),Cell(2,0,1),Cell(2,1,\"f3,f6\"),Cell(3,0,0),Cell(3,1,\"f1,f2,f5\"),Cell(4,0,0),Cell(4,1,\"f1,f2\")),Seq(),Seq(), Seq(1))\n\nval m2 = Matrix(Seq(Cell(0,0,\"label\"),Cell(0,1,\"features\"),Cell(1,0,1),Cell(1,1,\"f1,f3,f4,f6\"),Cell(2,0,1),Cell(2,1,\"f3,f6\"),Cell(3,0,0),Cell(3,1,\"f1,f2,f5\"),Cell(4,0,0),Cell(4,1,\"f1,f2\"),Cell(5,0,\"?\"),Cell(5,1,\"f1,f3,f4\"),Cell(6,0,\"?\"),Cell(6,1,\"f2\")),Seq(),Seq(), Seq(1,5))\n\n\n//val m2 = Matrix(Seq(Cell(1,0,1.0),Cell(1,1,\"Blah\")),Seq(RowLabel(1,\"row1\"),RowLabel(0,\"row2\")),Seq(ColLabel(1,\"col2\")), Seq(1))\n\nval matrices = Seq(m1,m2)\n\n\nMatrixRenderer.render(matrices,layout)",
      "extraFields" : {
        "showEditor" : "false",
        "aggregatedCells" : "[]"
      }
    }
  }, {
    "id" : 3,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "matrix",
      "extraFields" : { }
    }
  }, {
    "id" : 4,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Matrix formulation",
      "extraFields" : { }
    }
  }, {
    "id" : 5,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import uk.ac.ucl.cs.mr.acltutorial._\nimport MatrixRenderer._\n\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=8,numRows=6)\n\n//val m1 = Matrix(Seq(Cell(0,0,\"label\"),Cell(0,1,\"features\"),Cell(1,0,1),Cell(1,1,\"f1,f3,f4,f6\"),Cell(2,0,1),Cell(2,1,\"f3,f6\"),Cell(3,0,0),Cell(3,1,\"f1,f2,f5\"),Cell(4,0,0),Cell(4,1,\"f1,f2\")),Seq(),Seq(), Seq(1))\n\n//val m2 = Matrix(Seq(Cell(0,0,\"label\"),Cell(0,1,\"features\"),Cell(1,0,1),Cell(1,1,\"f1,f3,f4,f6\"),Cell(2,0,1),Cell(2,1,\"f3,f6\"),Cell(3,0,0),Cell(3,1,\"f1,f2,f5\"),Cell(4,0,0),Cell(4,1,\"f1,f2\"),Cell(5,0,\"?\"),Cell(5,1,\"f1,f3,f4\"),Cell(6,0,\"?\"),Cell(6,1,\"f2\")),Seq(),Seq(), Seq(1,5))\n\n\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,0),Cell(0,3,1),Cell(0,4,1),Cell(0,5,0),Cell(0,6,1),\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,1),Cell(1,4,0),Cell(1,5,0),Cell(1,6,1),\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,0),Cell(2,4,0),Cell(2,5,1),Cell(2,6,0),\nCell(3,0,0),Cell(3,1,1),Cell(3,2,1),Cell(3,3,0),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),\nCell(4,0,\"?\"),Cell(4,1,1),Cell(4,2,0),Cell(4,3,1),Cell(4,4,1),Cell(4,5,0),Cell(4,6,0),\nCell(5,0,\"?\"),Cell(5,1,0),Cell(5,2,1),Cell(5,3,0),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0)\n),\nSeq(RowLabel(0,\"train1\"),RowLabel(1,\"train2\"),RowLabel(2,\"train3\"),RowLabel(3,\"train4\"),RowLabel(4,\"test1\"),RowLabel(5,\"test2\")),Seq(ColLabel(0,\"label\"),ColLabel(1,\"feat1\"),ColLabel(2,\"feat2\"),ColLabel(3,\"feat3\"),ColLabel(4,\"feat4\"),ColLabel(5,\"feat5\"),ColLabel(6,\"feat6\")), Seq(0,4))\n\nval matrices = Seq(m2)\n\n\nMatrixRenderer.render(matrices,layout)",
      "extraFields" : {
        "showEditor" : "false",
        "aggregatedCells" : "[\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=60, ch=45, cw=200, rowHeaderSize=0, numCols=2,numRows=7)\\n\\nval m1 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\")),Seq(),Seq(), Seq(1))\\n\\nval m2 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\"),Cell(5,0,\\\"?\\\"),Cell(5,1,\\\"f1,f3,f4\\\"),Cell(6,0,\\\"?\\\"),Cell(6,1,\\\"f2\\\")),Seq(),Seq(), Seq(1,5))\\n\\n\\n//val m2 = Matrix(Seq(Cell(1,0,1.0),Cell(1,1,\\\"Blah\\\")),Seq(RowLabel(1,\\\"row1\\\"),RowLabel(0,\\\"row2\\\")),Seq(ColLabel(1,\\\"col2\\\")), Seq(1))\\n\\nval matrices = Seq(m1,m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\"]"
      }
    }
  }, {
    "id" : 6,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "semi",
      "extraFields" : { }
    }
  }, {
    "id" : 7,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Semi-Supervised Classification\n",
      "extraFields" : { }
    }
  }, {
    "id" : 8,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import uk.ac.ucl.cs.mr.acltutorial._\nimport MatrixRenderer._\n\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=8,numRows=8)\n\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,0),Cell(0,3,1),Cell(0,4,1),Cell(0,5,0),Cell(0,6,1),\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,1),Cell(1,4,0),Cell(1,5,0),Cell(1,6,1),\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,0),Cell(2,4,0),Cell(2,5,1),Cell(2,6,0),\nCell(3,0,0),Cell(3,1,1),Cell(3,2,1),Cell(3,3,0),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),\nCell(4,0,\"?\"),Cell(4,1,1),Cell(4,2,0),Cell(4,3,1),Cell(4,4,1),Cell(4,5,0),Cell(4,6,0),\nCell(5,0,\"?\"),Cell(5,1,0),Cell(5,2,1),Cell(5,3,0),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0),\nCell(6,0,\"-\"),Cell(6,1,1),Cell(6,2,0),Cell(6,3,0),Cell(6,4,1),Cell(6,5,0),Cell(6,6,0),\nCell(7,0,\"-\"),Cell(7,1,0),Cell(7,2,1),Cell(7,3,0),Cell(7,4,0),Cell(7,5,1),Cell(7,6,0)\n),\nSeq(RowLabel(0,\"train1\"),RowLabel(1,\"train2\"),RowLabel(2,\"train3\"),RowLabel(3,\"train4\"),RowLabel(4,\"test1\"),RowLabel(5,\"test2\"),RowLabel(6,\"unlab1\"),RowLabel(7,\"unlab2\")),Seq(ColLabel(0,\"label\"),ColLabel(1,\"feat1\"),ColLabel(2,\"feat2\"),ColLabel(3,\"feat4\"),ColLabel(4,\"feat4\"),ColLabel(5,\"feat5\"),ColLabel(6,\"feat6\")), Seq(0,4,6))\n\nval matrices = Seq(m2)\n\n\nMatrixRenderer.render(matrices,layout)",
      "extraFields" : {
        "showEditor" : "false",
        "aggregatedCells" : "[\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=60, ch=45, cw=200, rowHeaderSize=0, numCols=2,numRows=7)\\n\\nval m1 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\")),Seq(),Seq(), Seq(1))\\n\\nval m2 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\"),Cell(5,0,\\\"?\\\"),Cell(5,1,\\\"f1,f3,f4\\\"),Cell(6,0,\\\"?\\\"),Cell(6,1,\\\"f2\\\")),Seq(),Seq(), Seq(1,5))\\n\\n\\n//val m2 = Matrix(Seq(Cell(1,0,1.0),Cell(1,1,\\\"Blah\\\")),Seq(RowLabel(1,\\\"row1\\\"),RowLabel(0,\\\"row2\\\")),Seq(ColLabel(1,\\\"col2\\\")), Seq(1))\\n\\nval matrices = Seq(m1,m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\",\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=8,numRows=6)\\n\\n//val m1 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\")),Seq(),Seq(), Seq(1))\\n\\n//val m2 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\"),Cell(5,0,\\\"?\\\"),Cell(5,1,\\\"f1,f3,f4\\\"),Cell(6,0,\\\"?\\\"),Cell(6,1,\\\"f2\\\")),Seq(),Seq(), Seq(1,5))\\n\\n\\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,0),Cell(0,3,1),Cell(0,4,1),Cell(0,5,0),Cell(0,6,1),\\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,1),Cell(1,4,0),Cell(1,5,0),Cell(1,6,1),\\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,0),Cell(2,4,0),Cell(2,5,1),Cell(2,6,0),\\nCell(3,0,0),Cell(3,1,1),Cell(3,2,1),Cell(3,3,0),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),\\nCell(4,0,\\\"?\\\"),Cell(4,1,1),Cell(4,2,0),Cell(4,3,1),Cell(4,4,1),Cell(4,5,0),Cell(4,6,0),\\nCell(5,0,\\\"?\\\"),Cell(5,1,0),Cell(5,2,1),Cell(5,3,0),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0)\\n),\\nSeq(RowLabel(0,\\\"train1\\\"),RowLabel(1,\\\"train2\\\"),RowLabel(2,\\\"train3\\\"),RowLabel(3,\\\"train4\\\"),RowLabel(4,\\\"test1\\\"),RowLabel(5,\\\"test2\\\")),Seq(ColLabel(0,\\\"label\\\"),ColLabel(1,\\\"feat1\\\"),ColLabel(2,\\\"feat2\\\"),ColLabel(3,\\\"feat3\\\"),ColLabel(4,\\\"feat4\\\"),ColLabel(5,\\\"feat5\\\"),ColLabel(6,\\\"feat6\\\")), Seq(0,4))\\n\\nval matrices = Seq(m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\"]"
      }
    }
  }, {
    "id" : 9,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "multi",
      "extraFields" : { }
    }
  }, {
    "id" : 10,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "\n### Multi-Label Classification",
      "extraFields" : { }
    }
  }, {
    "id" : 11,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import uk.ac.ucl.cs.mr.acltutorial._\nimport MatrixRenderer._\n\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=9,numRows=8)\n\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,1),Cell(0,3,0),Cell(0,4,1),Cell(0,5,1),Cell(0,6,0),Cell(0,7,1),\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,0),Cell(1,4,1),Cell(1,5,0),Cell(1,6,0),Cell(1,7,1),\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,1),Cell(2,4,0),Cell(2,5,0),Cell(2,6,1),Cell(2,7,0),\nCell(3,0,0),Cell(3,1,0),Cell(3,2,1),Cell(3,3,1),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),Cell(3,7,0),\nCell(4,0,\"?\"),Cell(4,1,\"?\"),Cell(4,2,1),Cell(4,3,0),Cell(4,4,1),Cell(4,5,1),Cell(4,6,0),Cell(4,7,0),\nCell(5,0,\"?\"),Cell(5,1,\"?\"),Cell(5,2,0),Cell(5,3,1),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0),Cell(5,7,0),\nCell(6,0,\"-\"),Cell(6,1,\"-\"),Cell(6,2,1),Cell(6,3,0),Cell(6,4,0),Cell(6,5,1),Cell(6,6,0),Cell(6,7,0),\nCell(7,0,\"-\"),Cell(7,1,\"-\"),Cell(7,2,0),Cell(7,3,1),Cell(7,4,0),Cell(7,5,0),Cell(7,6,1),Cell(7,7,0)\n),\nSeq(RowLabel(0,\"train1\"),RowLabel(1,\"train2\"),RowLabel(2,\"train3\"),RowLabel(3,\"train4\"),RowLabel(4,\"test1\"),RowLabel(5,\"test2\"),RowLabel(6,\"unlab1\"),RowLabel(7,\"unlab2\")),Seq(ColLabel(0,\"task1\"),ColLabel(1,\"task2\"),ColLabel(2,\"feat1\"),ColLabel(3,\"feat2\"),ColLabel(4,\"feat4\"),ColLabel(5,\"feat4\"),ColLabel(6,\"feat5\"),ColLabel(7,\"feat6\")), Seq(0,4,6))\n\nval matrices = Seq(m2)\n\n\nMatrixRenderer.render(matrices,layout)",
      "extraFields" : {
        "showEditor" : "false",
        "aggregatedCells" : "[\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=60, ch=45, cw=200, rowHeaderSize=0, numCols=2,numRows=7)\\n\\nval m1 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\")),Seq(),Seq(), Seq(1))\\n\\nval m2 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\"),Cell(5,0,\\\"?\\\"),Cell(5,1,\\\"f1,f3,f4\\\"),Cell(6,0,\\\"?\\\"),Cell(6,1,\\\"f2\\\")),Seq(),Seq(), Seq(1,5))\\n\\n\\n//val m2 = Matrix(Seq(Cell(1,0,1.0),Cell(1,1,\\\"Blah\\\")),Seq(RowLabel(1,\\\"row1\\\"),RowLabel(0,\\\"row2\\\")),Seq(ColLabel(1,\\\"col2\\\")), Seq(1))\\n\\nval matrices = Seq(m1,m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\",\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=8,numRows=6)\\n\\n//val m1 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\")),Seq(),Seq(), Seq(1))\\n\\n//val m2 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\"),Cell(5,0,\\\"?\\\"),Cell(5,1,\\\"f1,f3,f4\\\"),Cell(6,0,\\\"?\\\"),Cell(6,1,\\\"f2\\\")),Seq(),Seq(), Seq(1,5))\\n\\n\\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,0),Cell(0,3,1),Cell(0,4,1),Cell(0,5,0),Cell(0,6,1),\\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,1),Cell(1,4,0),Cell(1,5,0),Cell(1,6,1),\\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,0),Cell(2,4,0),Cell(2,5,1),Cell(2,6,0),\\nCell(3,0,0),Cell(3,1,1),Cell(3,2,1),Cell(3,3,0),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),\\nCell(4,0,\\\"?\\\"),Cell(4,1,1),Cell(4,2,0),Cell(4,3,1),Cell(4,4,1),Cell(4,5,0),Cell(4,6,0),\\nCell(5,0,\\\"?\\\"),Cell(5,1,0),Cell(5,2,1),Cell(5,3,0),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0)\\n),\\nSeq(RowLabel(0,\\\"train1\\\"),RowLabel(1,\\\"train2\\\"),RowLabel(2,\\\"train3\\\"),RowLabel(3,\\\"train4\\\"),RowLabel(4,\\\"test1\\\"),RowLabel(5,\\\"test2\\\")),Seq(ColLabel(0,\\\"label\\\"),ColLabel(1,\\\"feat1\\\"),ColLabel(2,\\\"feat2\\\"),ColLabel(3,\\\"feat3\\\"),ColLabel(4,\\\"feat4\\\"),ColLabel(5,\\\"feat5\\\"),ColLabel(6,\\\"feat6\\\")), Seq(0,4))\\n\\nval matrices = Seq(m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\",\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=8,numRows=8)\\n\\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,0),Cell(0,3,1),Cell(0,4,1),Cell(0,5,0),Cell(0,6,1),\\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,1),Cell(1,4,0),Cell(1,5,0),Cell(1,6,1),\\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,0),Cell(2,4,0),Cell(2,5,1),Cell(2,6,0),\\nCell(3,0,0),Cell(3,1,1),Cell(3,2,1),Cell(3,3,0),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),\\nCell(4,0,\\\"?\\\"),Cell(4,1,1),Cell(4,2,0),Cell(4,3,1),Cell(4,4,1),Cell(4,5,0),Cell(4,6,0),\\nCell(5,0,\\\"?\\\"),Cell(5,1,0),Cell(5,2,1),Cell(5,3,0),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0),\\nCell(6,0,\\\"-\\\"),Cell(6,1,1),Cell(6,2,0),Cell(6,3,0),Cell(6,4,1),Cell(6,5,0),Cell(6,6,0),\\nCell(7,0,\\\"-\\\"),Cell(7,1,0),Cell(7,2,1),Cell(7,3,0),Cell(7,4,0),Cell(7,5,1),Cell(7,6,0)\\n),\\nSeq(RowLabel(0,\\\"train1\\\"),RowLabel(1,\\\"train2\\\"),RowLabel(2,\\\"train3\\\"),RowLabel(3,\\\"train4\\\"),RowLabel(4,\\\"test1\\\"),RowLabel(5,\\\"test2\\\"),RowLabel(6,\\\"unlab1\\\"),RowLabel(7,\\\"unlab2\\\")),Seq(ColLabel(0,\\\"label\\\"),ColLabel(1,\\\"feat1\\\"),ColLabel(2,\\\"feat2\\\"),ColLabel(3,\\\"feat4\\\"),ColLabel(4,\\\"feat4\\\"),ColLabel(5,\\\"feat5\\\"),ColLabel(6,\\\"feat6\\\")), Seq(0,4,6))\\n\\nval matrices = Seq(m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\"]"
      }
    }
  }, {
    "id" : 12,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "missing",
      "extraFields" : { }
    }
  }, {
    "id" : 13,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Missing Features",
      "extraFields" : { }
    }
  }, {
    "id" : 14,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import uk.ac.ucl.cs.mr.acltutorial._\nimport MatrixRenderer._\n\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=9,numRows=8)\n\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,1),Cell(0,3,0),Cell(0,4,1),Cell(0,5,\"-\"),Cell(0,6,0),Cell(0,7,1),\nCell(1,0,1),Cell(1,1,0),Cell(1,2,\"-\"),Cell(1,3,\"-\"),Cell(1,4,1),Cell(1,5,0),Cell(1,6,0),Cell(1,7,1),\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,1),Cell(2,4,0),Cell(2,5,\"-\"),Cell(2,6,1),Cell(2,7,0),\nCell(3,0,0),Cell(3,1,0),Cell(3,2,1),Cell(3,3,\"-\"),Cell(3,4,\"-\"),Cell(3,5,0),Cell(3,6,0),Cell(3,7,0),\nCell(4,0,\"?\"),Cell(4,1,\"?\"),Cell(4,2,1),Cell(4,3,0),Cell(4,4,\"-\"),Cell(4,5,1),Cell(4,6,0),Cell(4,7,0),\nCell(5,0,\"?\"),Cell(5,1,\"?\"),Cell(5,2,0),Cell(5,3,1),Cell(5,4,\"-\"),Cell(5,5,0),Cell(5,6,\"-\"),Cell(5,7,0),\nCell(6,0,\"-\"),Cell(6,1,\"-\"),Cell(6,2,1),Cell(6,3,0),Cell(6,4,\"-\"),Cell(6,5,1),Cell(6,6,0),Cell(6,7,\"-\"),\nCell(7,0,\"-\"),Cell(7,1,\"-\"),Cell(7,2,0),Cell(7,3,1),Cell(7,4,0),Cell(7,5,0),Cell(7,6,\"-\"),Cell(7,7,\"-\")\n),\nSeq(RowLabel(0,\"train1\"),RowLabel(1,\"train2\"),RowLabel(2,\"train3\"),RowLabel(3,\"train4\"),RowLabel(4,\"test1\"),RowLabel(5,\"test2\"),RowLabel(6,\"unlab1\"),RowLabel(7,\"unlab2\")),Seq(ColLabel(0,\"task1\"),ColLabel(1,\"task2\"),ColLabel(2,\"feat1\"),ColLabel(3,\"feat2\"),ColLabel(4,\"feat4\"),ColLabel(5,\"feat4\"),ColLabel(6,\"feat5\"),ColLabel(7,\"feat6\")), Seq(0,4,6))\n\nval matrices = Seq(m2)\n\n\nMatrixRenderer.render(matrices,layout)",
      "extraFields" : {
        "showEditor" : "false",
        "aggregatedCells" : "[\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=60, ch=45, cw=200, rowHeaderSize=0, numCols=2,numRows=7)\\n\\nval m1 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\")),Seq(),Seq(), Seq(1))\\n\\nval m2 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\"),Cell(5,0,\\\"?\\\"),Cell(5,1,\\\"f1,f3,f4\\\"),Cell(6,0,\\\"?\\\"),Cell(6,1,\\\"f2\\\")),Seq(),Seq(), Seq(1,5))\\n\\n\\n//val m2 = Matrix(Seq(Cell(1,0,1.0),Cell(1,1,\\\"Blah\\\")),Seq(RowLabel(1,\\\"row1\\\"),RowLabel(0,\\\"row2\\\")),Seq(ColLabel(1,\\\"col2\\\")), Seq(1))\\n\\nval matrices = Seq(m1,m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\",\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=8,numRows=6)\\n\\n//val m1 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\")),Seq(),Seq(), Seq(1))\\n\\n//val m2 = Matrix(Seq(Cell(0,0,\\\"label\\\"),Cell(0,1,\\\"features\\\"),Cell(1,0,1),Cell(1,1,\\\"f1,f3,f4,f6\\\"),Cell(2,0,1),Cell(2,1,\\\"f3,f6\\\"),Cell(3,0,0),Cell(3,1,\\\"f1,f2,f5\\\"),Cell(4,0,0),Cell(4,1,\\\"f1,f2\\\"),Cell(5,0,\\\"?\\\"),Cell(5,1,\\\"f1,f3,f4\\\"),Cell(6,0,\\\"?\\\"),Cell(6,1,\\\"f2\\\")),Seq(),Seq(), Seq(1,5))\\n\\n\\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,0),Cell(0,3,1),Cell(0,4,1),Cell(0,5,0),Cell(0,6,1),\\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,1),Cell(1,4,0),Cell(1,5,0),Cell(1,6,1),\\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,0),Cell(2,4,0),Cell(2,5,1),Cell(2,6,0),\\nCell(3,0,0),Cell(3,1,1),Cell(3,2,1),Cell(3,3,0),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),\\nCell(4,0,\\\"?\\\"),Cell(4,1,1),Cell(4,2,0),Cell(4,3,1),Cell(4,4,1),Cell(4,5,0),Cell(4,6,0),\\nCell(5,0,\\\"?\\\"),Cell(5,1,0),Cell(5,2,1),Cell(5,3,0),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0)\\n),\\nSeq(RowLabel(0,\\\"train1\\\"),RowLabel(1,\\\"train2\\\"),RowLabel(2,\\\"train3\\\"),RowLabel(3,\\\"train4\\\"),RowLabel(4,\\\"test1\\\"),RowLabel(5,\\\"test2\\\")),Seq(ColLabel(0,\\\"label\\\"),ColLabel(1,\\\"feat1\\\"),ColLabel(2,\\\"feat2\\\"),ColLabel(3,\\\"feat3\\\"),ColLabel(4,\\\"feat4\\\"),ColLabel(5,\\\"feat5\\\"),ColLabel(6,\\\"feat6\\\")), Seq(0,4))\\n\\nval matrices = Seq(m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\",\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=8,numRows=8)\\n\\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,0),Cell(0,3,1),Cell(0,4,1),Cell(0,5,0),Cell(0,6,1),\\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,1),Cell(1,4,0),Cell(1,5,0),Cell(1,6,1),\\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,0),Cell(2,4,0),Cell(2,5,1),Cell(2,6,0),\\nCell(3,0,0),Cell(3,1,1),Cell(3,2,1),Cell(3,3,0),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),\\nCell(4,0,\\\"?\\\"),Cell(4,1,1),Cell(4,2,0),Cell(4,3,1),Cell(4,4,1),Cell(4,5,0),Cell(4,6,0),\\nCell(5,0,\\\"?\\\"),Cell(5,1,0),Cell(5,2,1),Cell(5,3,0),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0),\\nCell(6,0,\\\"-\\\"),Cell(6,1,1),Cell(6,2,0),Cell(6,3,0),Cell(6,4,1),Cell(6,5,0),Cell(6,6,0),\\nCell(7,0,\\\"-\\\"),Cell(7,1,0),Cell(7,2,1),Cell(7,3,0),Cell(7,4,0),Cell(7,5,1),Cell(7,6,0)\\n),\\nSeq(RowLabel(0,\\\"train1\\\"),RowLabel(1,\\\"train2\\\"),RowLabel(2,\\\"train3\\\"),RowLabel(3,\\\"train4\\\"),RowLabel(4,\\\"test1\\\"),RowLabel(5,\\\"test2\\\"),RowLabel(6,\\\"unlab1\\\"),RowLabel(7,\\\"unlab2\\\")),Seq(ColLabel(0,\\\"label\\\"),ColLabel(1,\\\"feat1\\\"),ColLabel(2,\\\"feat2\\\"),ColLabel(3,\\\"feat4\\\"),ColLabel(4,\\\"feat4\\\"),ColLabel(5,\\\"feat5\\\"),ColLabel(6,\\\"feat6\\\")), Seq(0,4,6))\\n\\nval matrices = Seq(m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\",\"import uk.ac.ucl.cs.mr.acltutorial._\\nimport MatrixRenderer._\\n\\nval layout = Layout(colHeaderSize=110, ch=45, cw=60, rowHeaderSize=70, numCols=9,numRows=8)\\n\\nval m2 = Matrix(Seq(Cell(0,0,1),Cell(0,1,1),Cell(0,2,1),Cell(0,3,0),Cell(0,4,1),Cell(0,5,1),Cell(0,6,0),Cell(0,7,1),\\nCell(1,0,1),Cell(1,1,0),Cell(1,2,0),Cell(1,3,0),Cell(1,4,1),Cell(1,5,0),Cell(1,6,0),Cell(1,7,1),\\nCell(2,0,0),Cell(2,1,1),Cell(2,2,1),Cell(2,3,1),Cell(2,4,0),Cell(2,5,0),Cell(2,6,1),Cell(2,7,0),\\nCell(3,0,0),Cell(3,1,0),Cell(3,2,1),Cell(3,3,1),Cell(3,4,0),Cell(3,5,0),Cell(3,6,0),Cell(3,7,0),\\nCell(4,0,\\\"?\\\"),Cell(4,1,\\\"?\\\"),Cell(4,2,1),Cell(4,3,0),Cell(4,4,1),Cell(4,5,1),Cell(4,6,0),Cell(4,7,0),\\nCell(5,0,\\\"?\\\"),Cell(5,1,\\\"?\\\"),Cell(5,2,0),Cell(5,3,1),Cell(5,4,0),Cell(5,5,0),Cell(5,6,0),Cell(5,7,0),\\nCell(6,0,\\\"-\\\"),Cell(6,1,\\\"-\\\"),Cell(6,2,1),Cell(6,3,0),Cell(6,4,0),Cell(6,5,1),Cell(6,6,0),Cell(6,7,0),\\nCell(7,0,\\\"-\\\"),Cell(7,1,\\\"-\\\"),Cell(7,2,0),Cell(7,3,1),Cell(7,4,0),Cell(7,5,0),Cell(7,6,1),Cell(7,7,0)\\n),\\nSeq(RowLabel(0,\\\"train1\\\"),RowLabel(1,\\\"train2\\\"),RowLabel(2,\\\"train3\\\"),RowLabel(3,\\\"train4\\\"),RowLabel(4,\\\"test1\\\"),RowLabel(5,\\\"test2\\\"),RowLabel(6,\\\"unlab1\\\"),RowLabel(7,\\\"unlab2\\\")),Seq(ColLabel(0,\\\"task1\\\"),ColLabel(1,\\\"task2\\\"),ColLabel(2,\\\"feat1\\\"),ColLabel(3,\\\"feat2\\\"),ColLabel(4,\\\"feat4\\\"),ColLabel(5,\\\"feat4\\\"),ColLabel(6,\\\"feat5\\\"),ColLabel(7,\\\"feat6\\\")), Seq(0,4,6))\\n\\nval matrices = Seq(m2)\\n\\n\\nMatrixRenderer.render(matrices,layout)\"]"
      }
    }
  }, {
    "id" : 15,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "notation",
      "extraFields" : { }
    }
  }, {
    "id" : 16,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Notation\n\n- Scalars: lower-case letters \\\\(v,m\\\\)\n- Vectors: boldface lower-case letters \\\\(\\mathbf{v}\\\\)\n- Matrices: boldface capital letters \\\\(\\mathbf{M}\\\\)\n \n- \\\\(i\\\\)th element of a vector \\\\(\\mathbf{v}\\\\): \\\\(v_i\\\\)\n- \\\\((i,j)\\\\)-element of a matrix \\\\(\\mathbf{M}\\\\): \\\\(m_{ij}\\\\)\n- \\\\(i\\\\)th row of a matrix \\\\(\\mathbf{M}\\\\): \\\\(\\mathbf{m}_{i:}\\\\)\n- \\\\(j\\\\)th column of a matrix \\\\(\\mathbf{M}\\\\): \\\\(\\mathbf{m}_{:j}\\\\)",
      "extraFields" : {
        "hide_output" : "false"
      }
    }
  }, {
    "id" : 17,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "algebra",
      "extraFields" : { }
    }
  }, {
    "id" : 18,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Matrix Operations\n- the **inner product** is \\\\(\\langle \\mathbf{u},\\mathbf{v} \\rangle := \\sum_{l=1}^L u_{l} v_l\\\\)\nwhere \\\\(\\mathbf{u}\\in\\Re^L\\\\) and \\\\(\\mathbf{v}\\in\\Re^L\\\\)\n\n- the **outer product**  \\\\( \\mathbf{u} \\otimes \\mathbf{v} \\\\) between vectors \\\\(\\mathbf{u}\\in\\Re^N\\\\) and \\\\(\\mathbf{v}\\in\\Re^M\\\\) is the \\\\(N\\times M\\\\) matrix with elements \\\\(u_nv_m\\\\), \\\\( n=\\{1,\\cdots,N\\} \\\\) and \\\\(m= \\{1,\\cdots,M\\} \\\\)\n\n- the **outer product** for matrices \\\\(\\mathbf{U} \\in\\Re^{N\\times L} \\\\) and \\\\(\\mathbf{V} \\in \\Re^{L \\times M} \\\\), \\\\( \\mathbf{U} \\otimes \\mathbf{V} := \\sum_{\\ell=1}^L \\mathbf{U}_{:\\ell} \\otimes \\mathbf{V}_{\\ell:} \\\\)\n\n- the element-wise **Hadamard product** for matrices \\\\(\\mathbf{U},\\mathbf{V} \\in\\Re^{N\\times L} \\\\) is the \\\\(N\\times L\\\\) matrix \\\\(\\mathbf{U}\\circ \\mathbf{V}\\\\) with elements \\\\((\\mathbf{U}\\circ \\mathbf{V})_{n,l}:=u_{n,l}v_{n,l}\\\\)\n\n- the matrix **\\\\(p\\\\)-norm** is \\\\(||\\mathbf{U}||_p := \\left(\\sum_{m=1}^M\\sum_{n=1}^N |u_{n,m}|^2 \\right)^{1/p} \\\\)\n\n- the **Frobenius norm** is \\\\(||\\mathbf{U}||_F := ||\\mathbf{U}||_2\\\\)",
      "extraFields" : { }
    }
  } ],
  "config" : { }
}

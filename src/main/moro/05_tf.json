{
  "name" : "Tensor Factorization",
  "cells" : [ {
    "id" : 0,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "tensor",
      "extraFields" : { }
    }
  }, {
    "id" : 1,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Tensors\n- Many real-world data has multiple *(>2)* interacting variables\n    - Subject, verb, object triplets \\\\((s,v,o)\\\\)\n    - Binary relation triplets \\\\((r_s, e_i, e_j)\\\\)\n    - Tag-recommendation: user, item, tag triplets \\\\((u, i, t)\\\\)\n- 2D Matrix representation is an unnatural choice\n- *Tensors* are the higher-order generalization of matrices",
      "extraFields" : { }
    }
  }, {
    "id" : 2,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "notation",
      "extraFields" : { }
    }
  }, {
    "id" : 3,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Notation\n(Kolda and Bader, 2009)\n\n- Vectors: boldface lower-case letters \\\\(\\mathbf{v}\\\\)\n- Matrices: boldface capital letters \\\\(\\mathbf{M}\\\\)\n- Tensors: Euler script letters \\\\(\\mathcal{T}\\\\)\n- Order-\\\\(N\\\\) tensor is a multidimensional array with N indices\n\n    \\\\(\\mathcal{T} \\in \\mathbb{R}^{I_1 \\,\\times\\, I_2 \\,\\times\\, \\cdots\\, \\times\\, I_N}\\\\)\n",
      "extraFields" : { }
    }
  }, {
    "id" : 4,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "example",
      "extraFields" : { }
    }
  }, {
    "id" : 5,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "\n### Example Order-3 Tensor\n- \\\\(\\mathcal{T} \\in \\mathbb{R}^{|E| \\,\\times\\, |E| \\,\\times\\, |R|}\\\\)\n\n<img src=\"../../assets/figures/tensor-ex.png\" height=\"300\">",
      "extraFields" : { }
    }
  }, {
    "id" : 6,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "fibers",
      "extraFields" : { }
    }
  }, {
    "id" : 7,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Order-3 Tensor Fibers\n\n<img src=\"../../assets/figures/fibers.png\" height=\"300\">\n\n- \\\\(\\mathbf{t}_{\\cdot jk}\\\\) is used to denote the mode-1 column fiber when fixing mode 2 to j and mode 3 to k\n- \\\\(\\mathbf{t}_{i \\cdot k}\\\\) mode-2 row fiber\n- \\\\(\\mathbf{t}_{ij \\cdot}\\\\) mode-3 tube fiber",
      "extraFields" : { }
    }
  }, {
    "id" : 8,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "slices",
      "extraFields" : { }
    }
  }, {
    "id" : 9,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Order-3 Tensor Slices\n\n<img src=\"../../assets/figures/slices.png\" height=\"300\">\n\n- \\\\(\\mathbf{T}_{i\\cdot\\cdot}\\\\) denotes the horizontal slice when fixing the mode-1 index to i\n- \\\\(\\mathbf{T}_{\\cdot j \\cdot}\\\\) vertical slice\n- \\\\(\\mathbf{T}_{\\cdot\\cdot k}\\\\) lateral slice",
      "extraFields" : { }
    }
  }, {
    "id" : 10,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "algebra",
      "extraFields" : { }
    }
  }, {
    "id" : 11,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Tensor Operations\n- Mode-\\\\(N\\\\) tensor-vector product \\\\(\\mathcal{T} \\times_N \\mathbf{v}\\\\)\n    - Dot product of each mode-\\\\(N\\\\) fiber in \\\\(\\mathcal{T}\\\\) with \\\\(\\mathbf{v}\\\\)\n- Mode-\\\\(N\\\\) tensor-matrix product \\\\(\\mathcal{T} \\times_N \\mathbf{M}\\\\)\n    - Matrix-vector product of each mode-\\\\(N\\\\) fiber in \\\\(\\mathcal{T}\\\\) with \\\\(\\mathbf{M}\\\\)\n- Mode-\\\\(N\\\\) matricization \\\\(\\mathbf{T}_{(N)}\\\\)\n    - Arrange all mode-\\\\(N\\\\) fibers as columns\n",
      "extraFields" : { }
    }
  }, {
    "id" : 12,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "tucker",
      "extraFields" : { }
    }
  }, {
    "id" : 13,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Tucker Decomposition\n(Tucker, 1966)\n\n- Given: \\\\(\\mathcal{T} \\in \\mathbb{R}^{p \\,\\times\\, q \\,\\times\\, r}\\\\)\n- \\\\(\\mathcal{T} \\approx \\mathcal{G} \\times_1 \\mathbf{A} \\times_2 \\mathbf{B} \\times_3 \\mathbf{C}\\\\)\n    - \\\\(\\mathcal{G}\\\\) is called *core tensor*\n        - Models linear interactions between all three variables\n    - \\\\(\\mathbf{A}\\\\), \\\\(\\mathbf{B}\\\\) and \\\\(\\mathbf{C}\\\\) are called *loading matrices*         \n    - \\\\(\\mathcal{G} \\in \\mathbb{R}^{N_1 \\,\\times\\, N_2 \\,\\times\\, N_3}\\\\), \\\\(\\mathbf{A} \\in \\mathbb{R}^{N_1 \\,\\times\\, p}\\\\), \\\\(\\mathbf{B} \\in \\mathbb{R}^{N_2 \\,\\times\\, q}\\\\), \\\\(\\mathbf{C} \\in \\mathbb{R}^{N_3 \\,\\times\\, r}\\\\)\n    \n\n",
      "extraFields" : { }
    }
  }, {
    "id" : 14,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "tucker3example",
      "extraFields" : { }
    }
  }, {
    "id" : 15,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Example\n\n<img src=\"../../assets/figures/tucker3.png\" height=\"250\">\n\n- Problem: in practice hard to estimate parameters\n    - SGD expensive for core tensor \\\\(\\mathcal{G}\\\\)\n- Often one mode is kept fixed (Tucker2)",
      "extraFields" : { }
    }
  }, {
    "id" : 16,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "tucker2",
      "extraFields" : { }
    }
  }, {
    "id" : 17,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Tucker2 Decomposition\n\n- Full Tucker decomposition is called Tucker3\n    - Factorizes along all three modes\n- Tucker2 factorizes only along two modes\n    - One of the loading matrices is the identity matrix\n    - \\\\(\\mathcal{T} \\approx \\mathcal{G} \\times_1 \\mathbf{A} \\times_2 \\mathbf{B}\\\\)\n<br />\n\n#### Example\n\n<img src=\"../../assets/figures/tucker2.png\" height=\"250\">",
      "extraFields" : { }
    }
  }, {
    "id" : 18,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "tucker1",
      "extraFields" : { }
    }
  }, {
    "id" : 19,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Matrix Factorization as Tucker1 Decomposition\n\n- Tucker1 factorizes only along one mode\n- Is an instance of matrix factorization\n    - Learns vectors for pairs of variables of two modes\n\n<br />\n\n#### Example\n\n<img src=\"../../assets/figures/tucker1.png\" height=\"250\">\n",
      "extraFields" : { }
    }
  }, {
    "id" : 20,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "candecomp",
      "extraFields" : { }
    }
  }, {
    "id" : 21,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### CANDECOMP/PARAFAC\n(Carroll and Chang, 1970; Harshman, 1970)\n\n- Rank-\\\\(1\\\\) tensor: outer product of three vectors\n\n    \\\\(\\mathcal{X} = \\mathbf{a} \\circ \\mathbf{b} \\circ \\mathbf{c}\\\\) \n- Approximate \\\\(\\mathcal{T}\\\\) with a sum of \\\\(n\\\\) rank-\\\\(1\\\\) tensors\n\n    \\\\(\\mathcal{T} \\approx \\sum_{i=1}^n \\mathbf{a}_i \\circ \\mathbf{b}_i \\circ \\mathbf{c}_i\\\\)\n    \n- Loss\n\n    \\\\(\\min_{\\mathbf{a}_i\\mathbf{b}_i\\mathbf{c}_i} ||\\mathcal{T} - \\sum_{i=1}^n \\mathbf{a}_i \\circ \\mathbf{b}_i \\circ \\mathbf{c}_i||_2^F\\\\)",
      "extraFields" : { }
    }
  }, {
    "id" : 22,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "application",
      "extraFields" : { }
    }
  }, {
    "id" : 23,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "# Application\n## Multi-relational Knowledge Base Factorization",
      "extraFields" : { }
    }
  }, {
    "id" : 24,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "rescal",
      "extraFields" : { }
    }
  }, {
    "id" : 25,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### RESCAL\n(Nickel et al, 2011; 2012)\n<br />\n<img src=\"../../assets/figures/nickel.png\" height=\"150\">\n\n<img src=\"../../assets/figures/rescal.png\" height=\"300\">\n",
      "extraFields" : { }
    }
  }, {
    "id" : 26,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "rescal2",
      "extraFields" : { }
    }
  }, {
    "id" : 27,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### RESCAL\n(Nickel et al, 2011; 2012)\n\n- Is an instance of Tucker2 \n\n    \\\\(\\mathcal{T} \\approx \\mathcal{R} \\times_1 \\mathbf{A} \\times_2 \\mathbf{A}\\\\)\n    \n    - \\\\(\\mathcal{R}\\\\) holds one slice \\\\(\\mathbf{R}_s \\in \\mathbb{R}^{k \\,\\times\\, k}\\\\) for each relation \\\\(s\\\\)\n    - \\\\(\\mathbf{A} \\in \\mathbb{R}^{|E| \\,\\times\\, k}\\\\) is the dictonary-matrix for all entity embeddings\n    - Symmetry assumption: an entity has the same embedding whether used as first or second argument\n- Per relation view (\\\\(s\\\\) slices of \\\\(\\mathcal{T}\\\\) and \\\\(\\mathcal{R}\\\\)): \\\\(\\mathbf{T}_s \\approx \\mathbf{A} \\mathbf{R}_s \\mathbf{A}^T\\\\)\n\n- Loss function (excluding regularization)\n\n    \\\\(\\min_{\\mathbf{R}_s, \\mathbf{A}} \\sum_s|| \\mathbf{T}_s - \\mathbf{A}\\mathbf{R}_s\\mathbf{A}^T ||^2_F + \\lambda_R ||\\mathbf{R}_s||^2_F +\\lambda_A ||\\mathbf{A}||^2_F\\\\)\n    \n- Optimized using Alternating Least Squares    ",
      "extraFields" : { }
    }
  }, {
    "id" : 28,
    "compiler" : "section",
    "input" : {
      "sessionId" : null,
      "code" : "results",
      "extraFields" : { }
    }
  }, {
    "id" : 29,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "### Results \n\n<img src=\"../../assets/figures/rescal-results.png\">\n\n",
      "extraFields" : { }
    }
  } ],
  "config" : { }
}
